// Copyright 2018 9AM Software. All rights reserved.
// Distribution of this file is strictly prohibited.

'use strict';

const { errorList, serverMessages } = require('app/core/err_code');

/**
 * 外部错误类型
 */
class ErrorType {
  /**
   *
   * @param {number} code    业务错误码
   * @param {number} status  HTTP 状态码
   * @param {string} message 错误消息字符串在 locales 中的名称
   */
  constructor(code, status, message) {
    this.code = code;
    this.status = status;
    this.message = message;
  }
};

/**
 * 外部错误类，用于表示返回给 API 调用者的所有错误
 */
class ExternalError extends Error {
  /**
   * 构造函数
   *
   * @param {ErrorType} errorType 错误类型
   * @param {object}    data      错误的上下文数据（可选）
   * @param {object}    stack     错误的函数调用栈（可选，生产环境被过滤）
   */
  constructor(errorType, data, stack) {
    super();
    this.code = errorType.code;
    this.status = errorType.status || 400;
    this.message = errorType.message;
    if (data) this.data = data;
    if (stack) this.stack = stack;
  }
};

// 创建错误类型到错误代码的映射
ExternalError.errorList = () => {
  const result = {};
  for (const code in errorList) {
    if (!errorList.hasOwnProperty(code)) continue;
    const exceptionType = errorList[code].exception_type;
    if (exceptionType) {
      result[exceptionType] = code;
    }
  }
  return result;
};

// 创建错误类型到错误代码的映射
ExternalError.serverMessages = () => serverMessages;

const ET = (code, status, message) => Object.freeze(new ErrorType(code, status, message));

// Bad request
ExternalError.INVALID_PARAM = ET(2001, 400, 'ERROR.INVALID_PARAM');
ExternalError.NO_PERMISSION = ET(2002, 400, 'ERROR.NO_PERMISSION');
// User
ExternalError.LOGIN_FAILED = ET(3001, 400, 'ERROR.ACCOUNT_LOGIN_FAILED');
ExternalError.ACCOUNT_NOT_FOUND = ET(3002, 400, 'ERROR.ACCOUNT_NOT_FOUND');
ExternalError.SMS_REQUESTED_TOO_SOON = ET(3003, 400, 'ERROR.SMS_REQUESTED_TOO_SOON');
ExternalError.SEND_SMS_CODE_FAILED = ET(3004, 400, 'ERROR.SEND_SMS_CODE_FAILED');
ExternalError.LOGOUT_FAILED = ET(3005, 400, 'ERROR.ACCOUNT_LOGOUT_FAILED');
ExternalError.UPDATE_USER_FAILED = ET(3007, 400, 'ERROR.UPDATE_USER_FAILED');
ExternalError.ADD_USER_FAILED = ET(3008, 400, 'ERROR.ADD_USER_FAILED');
ExternalError.OLD_PASSWORD_UNMATCHED = ET(3009, 400, 'ERROR.OLD_PASSWORD_UNMATCHED');
ExternalError.CHANGE_PASSWORD_FAILED = ET(3010, 400, 'ERROR.CHANGE_PASSWORD_FAILED');
ExternalError.OPERATION_FAILED = ET(3011, 400, 'ERROR.OPERATION_FAILED');
ExternalError.COUNT_USER_FAILED = ET(3012, 400, 'ERROR.COUNT_USER_FAILED');
ExternalError.LIST_USER_FAILED = ET(3013, 400, 'ERROR.LIST_USER_FAILED');
ExternalError.GET_USER_SETTINGS_FAILED = ET(3014, 400, 'ERROR.GET_USER_SETTINGS_FAILED');
ExternalError.GET_PERSON_STAND_FAILED = ET(3015, 400, 'ERROR.GET_PERSON_STAND_FAILED');
ExternalError.GET_PERSON_STAND_RANK_FAILED = ET(3016, 400, 'ERROR.GET_PERSON_STAND_RANK_FAILED');
ExternalError.GET_QINIU_TOKEN_FAILED = ET(3017, 400, 'ERROR.GET_QINIU_TOKEN_FAILED');
ExternalError.DELETE_USER_FAILED = ET(3018, 400, 'ERROR.DELETE_USER_FAILED');
ExternalError.TELEPHONE_ALREADY_EXISTS = ET(3019, 400, 'ERROR.TELEPHONE_ALREADY_EXISTS');
ExternalError.WRONG_PASSWORD = ET(3020, 400, 'ERROR.WRONG_PASSWORD');
ExternalError.USER_LOGGED_IN_AND_CANNOT_BE_DELETE = ET(
  3021, 400, 'ERROR.USER_LOGGED_IN_AND_CANNOT_BE_DELETE'
);
ExternalError.CODE_NOT_VERIFIED = ET(3022, 400, 'ERROR.CODE_NOT_VERIFIED');
ExternalError.CODE_HAS_EXPIRED = ET(3023, 400, 'ERROR.CODE_HAS_EXPIRED');
ExternalError.LOGGING_FAILED_FOR_USER_NOT_IN_COMPANY = ET(
  3024, 400, 'ERROR.LOGGING_FAILED_FOR_USER_NOT_IN_COMPANY'
);
ExternalError.RESOURCE_IS_IN_USE = ET(3025, 400, 'ERROR.RESOURCE_IS_IN_USE');
ExternalError.PUSHTODEVICE_NOTIFICATION_FAILED = ET(
  3026, 400, 'ERROR.PUSHTODEVICE_NOTIFICATION_FAILED'
);
ExternalError.EMAIL_ERR = ET(3027, 400, 'FIELDS.EMAIL_ERR');
ExternalError.SEND_EMAIL_FAILED = ET(3028, 400, 'ERROR.SEND_EMAIL_FAILED');
ExternalError.USER_NOT_ADMIN = ET(3029, 400, 'ERROR.USER_NOT_ADMIN');
ExternalError.RETRIEVE_PASSWORD_LINK_EXPIRED = ET(
  3030, 400, 'ERROR.RETRIEVE_PASSWORD_LINK_EXPIRED'
);
ExternalError.GET_SVG_FAILED = ET(3031, 400, 'ERROR.GET_SVG_FAILED');
ExternalError.EXCEL_FORMAT_WRONG = ET(3032, 400, 'ERROR.EXCEL_FORMAT_WRONG');
ExternalError.EXCEL_TEMPLATE_WRONG = ET(3033, 400, 'ERROR.EXCEL_TEMPLATE_WRONG');
ExternalError.EXCEL_EMPTY = ET(3034, 400, 'ERROR.EXCEL_EMPTY');
ExternalError.ADD_USER_GROUP_FAILED = ET(3035, 400, 'ERROR.ADD_USER_GROUP_FAILED');
ExternalError.DELETE_USER_GROUP_FAILED = ET(3036, 400, 'ERROR.DELETE_USER_GROUP_FAILED');
ExternalError.NOT_FOUND_COMPANY_FOR_USER = ET(3037, 400, 'ERROR.NOT_FOUND_COMPANY_FOR_USER');
ExternalError.GET_GROUP_USER_FAILED = ET(3038, 400, 'ERROR.GET_GROUP_USER_FAILED');

// Company
ExternalError.COMPANY_ACCOUNT_ALREADY_EXISTS = ET(
  4001, 400, 'ERROR.COMPANY_ACCOUNT_ALREADY_EXISTS'
);
ExternalError.COMPANY_NAME_ALREADY_EXISTS = ET(4002, 400, 'ERROR.COMPANY_NAME_ALREADY_EXISTS');
ExternalError.ADD_COMPANY_FAILED = ET(4003, 400, 'ERROR.ADD_COMPANY_FAILED');
ExternalError.ADD_COMPANY_ADMIN_FAILED = ET(4004, 400, 'ERROR.ADD_COMPANY_ADMIN_FAILED');
ExternalError.EDIT_COMPANY_FAILED = ET(4005, 400, 'ERROR.EDIT_COMPANY_FAILED');
ExternalError.RESET_PASSWORD_FAILED = ET(4006, 400, 'ERROR.RESET_PASSWORD_FAILED');
ExternalError.GET_COMPANY_STAND_FAILED = ET(4007, 400, 'ERROR.GET_COMPANY_STAND_FAILED');
ExternalError.GET_COMPANY_STAND_TREND_FAILED = ET(
  4008, 400, 'ERROR.GET_COMPANY_STAND_TREND_FAILED'
);
// DShow
ExternalError.HEARTBEAT_FAILED = ET(5001, 400, 'ERROR.HEARTBEAT_FAILED');
ExternalError.DESK_STATUS_CHANGE_FAILED = ET(5002, 400, 'ERROR.DESK_STATUS_CHANGE_FAILED');
ExternalError.UPDATE_USER_SETTINGS_FAILED = ET(5003, 400, 'ERROR.UPDATE_USER_SETTINGS_FAILED');
ExternalError.GET_BLUETOOTH_INFO_FAILED = ET(5004, 400, 'ERROR.GET_BLUETOOTH_INFO_FAILED');
ExternalError.UPLOAD_METRICS_FAILED = ET(5005, 400, 'ERROR.UPLOAD_METRICS_FAILED');
ExternalError.GET_DSHOW_VERSION_FAILED = ET(5006, 400, 'ERROR.GET_DSHOW_VERSION_FAILED');

// Resource
ExternalError.COUNT_RESOURCE_FAILED = ET(6001, 400, 'ERROR.COUNT_RESOURCE_FAILED');
ExternalError.RESOURCE_IN_USE_AND_CANNOT_BE_REMOVE = ET(
  6002, 400, 'ERROR.RESOURCE_IN_USE_AND_CANNOT_BE_REMOVE'
);

// NOTIFICATIONS
ExternalError.UPDATE_USER_NOTIFICATION_STATUS_FAILED = ET(
  7001, 400, 'ERROR.UPDATE_USER_NOTIFICATION_STATUS_FAILED'
);
ExternalError.ADD_NOTIFICATION_FAILED = ET(7002, 400, 'ERROR.ADD_NOTIFICATION_FAILED');
ExternalError.GET_NOTIFICATION_LIST_BY_USER_FAILED = ET(
  7003, 400, 'ERROR.GET_NOTIFICATION_LIST_BY_USER_FAILED'
);
ExternalError.GET_NOTIFICATION_USER_STATUS_LIST_FAILED = ET(
  7004, 400, 'ERROR.GET_NOTIFICATION_USER_STATUS_LIST_FAILED'
);
ExternalError.UNBIND_DEVICE_FAILED = ET(
  7005, 400, 'ERROR.UNBIND_DEVICE_FAILED'
);
ExternalError.UPDATE_RESOURCE_REMARK_FAILED = ET(
  7006, 400, 'ERROR.UPDATE_RESOURCE_REMARK_FAILED'
);
ExternalError.GET_NOTIFICATION_FAILED = ET(
  7007, 400, 'ERROR.GET_NOTIFICATION_FAILED'
);

// BANNER
ExternalError.ADD_BANNER_FAILED = ET(8001, 400, 'ERROR.ADD_BANNER_FAILED');
ExternalError.GET_BANNER_LIST_FAILED = ET(8002, 400, 'ERROR.GET_BANNER_LIST_FAILED');
ExternalError.PUBLISH_BANNER_FAILED = ET(8003, 400, 'ERROR.PUBLISH_BANNER_FAILED');
ExternalError.DELETE_BANNER_FAILED = ET(8004, 400, 'ERROR.DELETE_BANNER_FAILED');
ExternalError.EDIT_BANNER_FAILED = ET(8005, 400, 'ERROR.EDIT_BANNER_FAILED');
ExternalError.GET_DEFAULT_BANNER_PICTURE_FAILED =
  ET(8006, 400, 'ERROR.GET_DEFAULT_BANNER_PICTURE_FAILED');

ExternalError.DESK_LIST_FAILED = ET(9001, 400, 'ERROR.DESK_LIST_FAILED');
ExternalError.DESK_COUNT_FAILED = ET(9002, 400, 'ERROR.DESK_COUNT_FAILED');
ExternalError.DESK_TREND_FAILED = ET(9003, 400, 'ERROR.DESK_TREND_FAILED');
ExternalError.DESK_SERVICE_DURATION_FAILED = ET(9004, 400, 'ERROR.DESK_SERVICE_DURATION_FAILED');
ExternalError.DESK_DURATION_FAILED = ET(9005, 400, 'ERROR.DESK_DURATION_FAILED');
ExternalError.DESK_USAGE_RANK_FAILED = ET(9006, 400, 'ERROR.DESK_USAGE_RANK_FAILED');
ExternalError.DESK_YESTERDAY_COUNT_FAILED = ET(9007, 400, 'ERROR.DESK_YESTERDAY_COUNT_FAILED');
ExternalError.IOTAPI_GETTOKEN_FAILED = ET(9008, 400, 'ERROR.IOTAPI_GETTOKEN_FAILED');
ExternalError.GET_LIFTING_TREND_FAILED = ET(9010, 400, 'ERROR.GET_LIFTING_TREND_FAILED');
ExternalError.GET_LIFTING_WEEK_FAILED = ET(9011, 400, 'ERROR.GET_LIFTING_WEEK_FAILED');
ExternalError.GET_LIFTING_HOUR_FAILED = ET(9012, 400, 'ERROR.GET_LIFTING_HOUR_FAILED');
ExternalError.GET_STANDING_RANK_FAILED = ET(9013, 400, 'ERROR.GET_STANDING_RANK_FAILED');
ExternalError.GET_LIFTING_RANK_FAILED = ET(9014, 400, 'ERROR.GET_LIFTING_RANK_FAILED');
ExternalError.GET_LIFTING_STATISTICS_FAILED = ET(9015, 400, 'ERROR.GET_LIFTING_STATISTICS_FAILED');

ExternalError.GET_DEVICE_TWINS_FAILED = ET(10001, 400, 'ERROR.GET_DEVICE_TWINS_FAILED');

global.ExternalError = ExternalError;
exports.ExternalError = ExternalError;